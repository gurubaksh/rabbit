1- Database -  Database is a physical container for collections
2- Collection - Collection is a group of MongoDB documents. It is the equivalent of an RDBMS table
3- Document - A document is a set of key-value pairs. Documents have dynamic schema.
4- column - Field 
5-  Table Join -  Embedded Documents
6 - Primary Key -  Primary Key (Default key _id provided by mongodb itself)


Advantages of MongoDB over RDBMS

Schema less -


Where to Use MongoDB? - 

1-Big Data
2-Content Management and Delivery
3-Mobile and Social Infrastructure
4-User Data Management
5-Data Hub

ID in mongo db - 

_id is a 12 bytes hexadecimal number which assures the uniqueness of every document. You can provide _id while inserting the document. If you don’t provide then MongoDB provides a unique id for every document. These 12 bytes first 4 bytes for the current timestamp, next 3 bytes for machine id, next 2 bytes for process id of MongoDB server and remaining 3 bytes are simple incremental VALUE.


1- db.help() -  To get a list of commands
2- db.stats() -  To get stats about MongoDB server, type the command db.stats() in MongoDB client. This will show the database name, number of collection and documents in the database. Output of the command is shown in the following screenshot.


Some considerations while designing Schema in MongoDB

	1-Design your schema according to user requirements.
	2-Combine objects into one document if you will use them together. Otherwise separate them (but make sure there should not be need of joins).
	3-Duplicate the data (but limited) because disk space is cheap as compare to compute time.
	4-Do joins while write, not on read.
	5-Optimize your schema for most frequent use cases.
	6-Do complex aggregation in the schema.
	
3- use mydb - If you want to create a database with name 
4- db - To check your currently selected database
5- show dbs - If you want to check your databases list
6 - db.dropDatabase() - This will delete the selected database.

7 -db.createCollection(name, options) -  is used to create collection.
	options - 
	i)capped - Boolean - Optional) If true, enables a capped collection. Capped collection is a fixed size collection that automatically overwrites its oldest entries when it reaches its maximum size. If you specify true, you need to specify size parameter also.
	
	ii)autoIndexId - Boolean - (Optional) If true, automatically create index on _id field.s Default value is false.
	
	iii) size  - number - Optional) Specifies a maximum size in bytes for a capped collection. If capped is true, then you need to specify this field also.
	
	iv) max - number - (Optional) Specifies the maximum number of documents allowed in the capped collection.
	
	
8 - db.createCollection("mycollection") - crating the collections
	db.createCollection("mycol", { capped : true, autoIndexId : true, size : 
	   6142800, max : 10000 } )

9 - show collections - check the created collection

10 - db.COLLECTION_NAME.drop() - is used to drop a collection from the database.

11- db.COLLECTION_NAME.insert(document)  -  To insert data into MongoDB collection

12 - db.post.save(document)  - If you don't specify _id in the document then save() method will work same as insert() method. If you specify _id then it will replace whole data of document containing _id as specified in save() method.

13 - db.COLLECTION_NAME.find()  -  find() method will display all the documents in a non-structured way
14- db.mycol.find().pretty() -  To display the results in a formatted way, you can use pretty() method
15- findOne() - returns only one document.

16 -  where clause - 
	i) Equality - db.mycol.find({"by":"tutorials point"}).pretty()  -- where by = 'tutorials point'
	ii) Less Than - db.mycol.find({"likes":{$lt:50}}).pretty()  -- where likes < 50
	iii) Less Than Equals  -  db.mycol.find({"likes":{$lte:50}}).pretty() -- where likes <= 50
	iv) Greater Than - db.mycol.find({"likes":{$gt:50}}).pretty() -- where likes > 50
	v) Greater Than Equals -  db.mycol.find({"likes":{$gte:50}}).pretty() -- where likes >= 50
	vi) Not Equals -  db.mycol.find({"likes":{$ne:50}}).pretty() -- where likes != 50
	
	vii) and   - db.mycol.find({$and:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()
	viii)  Or - b.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()
	ix) - where likes>10 AND (by = 'tutorials point' OR title = 'MongoDB Overview') -- db.mycol.find({"likes": {$gt:10}, $or: [{"by": "tutorials point"},
   {"title": "MongoDB Overview"}]}).pretty()
 
17 - update()  - The update() method updates the values in the existing document.
	db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA) - 
	db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})
	
18 - remove() -  MongoDB's remove() method is used to remove a document from the collection
	db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)
	justOne - (Optional) if set to true or 1, then remove only one document.
	db.mycol.remove({'title':'MongoDB Overview'})
	
	Remove Only One - db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)

19- projection  - db.mycol.find({},{"title":1,_id:0})
20 - Limit() - db.COLLECTION_NAME.find().limit(NUMBER)
21 - Skip() - db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)
22 - sort() - db.mycol.find({},{"title":1,_id:0}).sort({"title":-1}) -- 1 is used for ascending order while -1 is used for descending order.
23 - ensureIndex() - To create an index - db.mycol.ensureIndex({"title":1,"description":-1})
24- aggregate() - db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}]) 
		select by_user, count(*) from mycol group by by_user.
		
	i) $sum - Sums up the defined value from all documents in the collection. - 
	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])
	
	ii) $avg - Calculates the average of all given values from all documents in the collection.
	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])
	
	iii) $min - Gets the minimum of the corresponding values from all documents in the collection.
	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])
	
	iv) $max - Gets the maximum of the corresponding values from all documents in the collection.
	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])
	
	v) $push - Inserts the value to an array in the resulting document. 
	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])
	
	vi)$addToSet - Inserts the value to an array in the resulting document but does not create duplicates.
	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])
	
	vii) $first - Gets the first document from the source documents according to the grouping. Typically this makes only sense together with some previously applied “$sort”-stage
	db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])
	
	viii) $last - Gets the last document from the source documents according to the grouping. Typically this makes only sense together with some previously applied “$sort”-stage.
	db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])
	
25 - Pipeline Concept - 

	i)$project - Used to select some specific fields from a collection
	
	ii)$match - This is a filtering operation and thus this can reduce the amount of documents that are given as input to the next stage.
	
	iii)$group - This does the actual aggregation as discussed above.
	
	iv) $sort - Sorts the documents.
	
	v) $skip - With this, it is possible to skip forward in the list of documents for a given amount of documents.
	
	vi) $limit - This limits the amount of documents to look at, by the given number starting from the current positions.
	
	vii) $unwind - This is used to unwind document that are using arrays. When using an array, the data is kind of pre-joined and this operation will be undone with this to have individual documents again. Thus with this stage we will increase the amount of documents for the next stage.
	
26 - Dump MongoDB Data - 

mongodump - back all data of the server to directory /bin/dump/ 

27 - mongorestore - To restore backup data


Advance mongodb - 

28- DBRefs - 
	i) $ref - This field specifies the collection of the referenced document
	ii) $id - This field specifies the _id field of the referenced document
	iii) $db - This is an optional field and contains the name of the database in which the referenced document lies
	
	{
	   "_id":ObjectId("53402597d852426020000002"),
	   "address": {
	   "$ref": "address_home",
	   "$id": ObjectId("534009e4d852427820000002"),
	   "$db": "tutorialspoint"},
	   "contact": "987654321",
	   "dob": "01-01-1991",
	   "name": "Tom Benzamin"
	}
	
	>var user = db.users.findOne({"name":"Tom Benzamin"})
	>var dbRef = user.address
	>db[dbRef.$ref].findOne({"_id":(dbRef.$id)})
	
29- $explain -  The $explain operator provides information on the query, indexes used in a query and other statistics. It is very useful when analyzing how well your indexes are optimized.

db.users.find({gender:"M"},{user_name:1,_id:0}).explain()

30 - Creating New ObjectId -- newObjectId = ObjectId()
31- Map Reduce - 








